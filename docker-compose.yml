version: "3.1"

# https://docs.docker.com/compose/environment-variables/
# https://hub.docker.com/_/postgres
# https://dzone.com/articles/using-postgresql-pgoutput-plugin-for-change-data-c
# https://docs.confluent.io/debezium-connect-postgres-source/current/postgres_source_connector_config.html
# https://stackoverflow.com/questions/59194471/how-set-the-server-name-of-postgres-using-docker-compose
# https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-kafka-connect-debezium#configure-and-start-the-debezium-postgresql-source-connector
# https://blog.dbi-services.com/postgresql-when-wal_level-to-logical/
# https://www.baeldung.com/ops/kafka-list-topics

# Docker Compose
# https://github.com/compose-spec/compose-spec/blob/master/spec.md

# After everything is running, you can run these commands to make sure it's ready:
# Show all running containers: docker ps
# Postgres: docker exec <pg container id> pg_isready
# Postgres - list all tables: docker exec <pg container id> psql -U admin -d test-db -c "\l"
# Kafka - to dig around... Note: you have to use the name of the service (i.e. zookeeper or kafka) instead of "localhost"
#   `docker exec -it docker-psql-cdc-debezium-kafka_kafka_1 bash`
#   Then, cd into the bin folder. Lots of kafka tools are included in here (just do an `ls`)
#   For example: ./kafka-console-consumer.sh --topic psqlserver.public.etltest --bootstrap-server kafka:9092 --from-beginning
#   or: ./kafka-topics.sh --bootstrap-server=kafka:9092 --list
#   or: ./bin/zookeeper-shell.sh zookeeper:2181 ls /brokers/ids

# To rebuild all of the containers (after you make changes): docker compose up --build --force-recreate

# Misc troubleshooting:
# https://stackoverflow.com/questions/62786240/use-debezium-link-postgresql-11-couldnt-obtain-encoding-for-database-test
# https://rmoff.net/2018/08/02/kafka-listeners-explained/
# Remove Kafka Connect connector: curl -X DELETE http://localhost:8083/connectors/cdc-test-db
# Add Kafka Connect connector: curl -X POST -H "Content-Type: application/json" --data @pg-source-connector.json http://localhost:8083/connectors

# The "easy way" - using an older version of Postgres https://hevodata.com/learn/kafka-cdc-postgres/

services:
  akhq:
    image: tchiotludo/akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
              schema-registry:
                url: "http://schema-registry:8085"
              connect:
                - name: "connect"
                  url: "http://connect:8083"
    ports:
      - 4001:8080
    links:
      - kafka
      - schema-registry

  schema-registry:
    image: confluentinc/cp-schema-registry
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:9092"
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8085"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: "INFO"

  psqlserver:
    image: postgres:13.2
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: test-db
    ports:
      - 5432:5432
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - psqlserver

  zookeeper:
    image: debezium/zookeeper:${DEBEZIUM_VERSION}
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
    depends_on:
      - psqlserver

  kafka:
    image: debezium/kafka:${DEBEZIUM_VERSION}
    ports:
      - 9092:9092
    links:
      - zookeeper
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
    depends_on:
      - psqlserver

  connect:
    image: debezium/connect:${DEBEZIUM_VERSION}
    ports:
      - 8083:8083
    links:
      - kafka
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=dbz
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
    depends_on:
      - psqlserver
